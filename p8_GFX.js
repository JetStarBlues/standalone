/*
    Code by www.jk-quantized.com
    Redistribution and use of this code in source and binary forms
    must retain the above attribution notice and this condition./
*/

/*
    A reverse engineering of PICO 8's graphics functions
    https://www.lexaloffle.com/pico-8.php?page=manual
*/


// Helpers ---------------------------------------

var originalDimension = 128;
var pxSize = Math.floor( width / originalDimension );
// var pxSize = Math.floor( 400 / originalDimension );

var sc = function ( x ) { 
    
    return x * pxSize;
};

var toAA = function ( as ) {
    
    // Convert array of strings to array of arrays
    
    var aa = [];
    
    for ( var i = 0; i < as.length; i += 1 ) {
        
        aa.push( as[ i ].split( '' ) );  // split string into char array
    }
    
    return aa;
};

var reshapeMap = function ( mapp ) {
    
    // Rearrange storage from 128 x 64 to 256 x 32  
    
    var mapp2 = [];
    
    for ( var i = 0; i < mapp.length; i += 2 ) {
        
        mapp2[ Math.floor( i / 2 ) ] = mapp[ i ] + mapp[ i + 1 ];
    }
    
    return mapp2;
};

// Palette stuff ---

var p8Palette = [
    
    //PICO 8
    color( 0, 0, 0 ),
    color( 29, 43, 83 ),
    color( 126, 37, 83 ),
    color( 0, 135, 81 ),
    color( 171, 82, 54 ),
    color( 95, 87, 79 ),
    color( 194, 195, 199 ),
    color( 255, 241, 232 ),
    color( 255, 0, 77 ),
    color( 255, 163, 0 ),
    color( 255, 236, 39 ),
    color( 0, 228, 54 ),
    color( 41, 173, 255 ),
    color( 131, 118, 156 ),
    color( 255, 119, 168 ),
    color( 255, 204, 170 )
];

// Get pjs color using hex index
var palette = {};

// Get pjs color using decimal index
var palette2 = new Array( p8Palette.length );

// Get hex code using pjs color
var palette3 = {};

var resetPalettesToDefault = function () {

    palette2 = p8Palette.slice();  // Get pjs color using decimal index

    for ( var i = 0; i < p8Palette.length; i += 1 ) {
        
        var pjsColor = p8Palette[ i ];
        var hexCode = i.toString( 16 );
        
        palette[ hexCode ] = pjsColor;  // Get pjs color using hex index
        palette3[ pjsColor ] = hexCode;  // Get hex code using pjs color
    }

};
resetPalettesToDefault();  // initialize

var swapPaletteColors = function ( c0, c1 ) {
    
    var temp = palette2[ c0 ];
    palette2[ c0 ] = palette2[ c1 ];
    palette2[ c1 ] = temp;
    
    var hx_c0 = c0.toString( 16 );
    var hx_c1 = c1.toString( 16 );
    var pj_c0 = palette2[ c0 ];
    var pj_c1 = palette2[ c1 ];
    
    palette[ hx_c0 ] = pj_c0;
    palette[ hx_c1 ] = pj_c1;
    
    palette3[ pj_c0 ] = hx_c0;
    palette3[ pj_c1 ] = hx_c1;
};

// Get transparency using decimal index
var paletteAlpha2 = new Array( p8Palette.length );

// Get transparency using hex index
var paletteAlpha = {};

var resetTransparency = function () {
    
    paletteAlpha2[ 0 ] = true;
    paletteAlpha[ '0' ] = true;
    
    for ( var i = 1; i < paletteAlpha2.length; i += 1 ) {
        
        paletteAlpha2[ i ] = false;
        paletteAlpha[ i.toString( 16 ) ] = false;
    }
};
resetTransparency();  // initialize


// ---
var spriteSheet = null;
var mapSheet = null;
var spriteFlags = null;
var rom_gfx = null;
var rom_shared = null;
var rom_map = null;
var rom_flags = null;

var curColor = palette2[ 0 ];
var curColorT = paletteAlpha2[ 0 ];
var cursorX = 0;
var cursorY = 0;
var cameraX = 0;
var cameraY = 0;

var f;
var initP8Font = function () {

    f = createFont( 'monospace' );
    // f = createFont( 'sans-serif' );
    textFont( f );
    textAlign( LEFT, TOP );
    textSize( sc( 7 ) ); // Pico font is 4 x 8 pixels
};

var drawPixel = function( x, y ) {
    
    if ( curColorT === false ) {  // not transparent

        fill( curColor );
        
        noStroke();
        // rect( sc( x ), sc( y ), pxSize, pxSize );
        // rect( sc( x - cameraX ), sc( y - cameraY ), pxSize, pxSize );
        rect( sc( x - cameraX ), sc( y - cameraY ), pxSize, pxSize );
    }
};


// Other Functions-----------------------------------

var drawSpriteSheet = function ( sheet ) {
    
    // 128 x 64 sprites (or shared 128 x 128)

    for ( var y = 0; y < sheet.length; y += 1 ) {
        
        var row = sheet[ y ];
        
        for ( var x = 0; x < row.length; x += 1 ) {
            
            curColor = palette[ row[ x ] ];
            
            drawPixel( x, y );
        }
    }
};

var drawMap = function ( mapp, xOffset, yOffset ) {
    
    // 128 x 32 sprites (or shared 128 x 64)
    
    for ( var j = 0; j < mapp.length; j += 1 ) {

        var y = j * 8;
        
        var row = mapp[ j ];
        
        for ( var i = 0; i < row.length; i += 2 ) {
            
            var x = Math.floor( i / 2 );  // two nibbles per sprite
            x *= 8;
            
            var spIdx = row[ i ] + row[ i + 1 ];
    
            spIdx = parseInt( spIdx, 16 );  // convert to decimal
    
            // spr( spIdx, x, y );
            spr( spIdx, x + xOffset, y + yOffset );  // enables psuedo scrolling
        }
    }
};


// Pico Functions -----------------------------------

var spr = function ( n, x, y, w, h, flipX, flipY ){ 
    
    var spx, spy;
    var spw, sph;
    var spflipX, spflipY;
    
    spw = 8;
    sph = 8;
    if ( w !== undefined ) { spw = w * 8; }
    if ( h !== undefined ) { sph = h * 8; }
    
    spflipX = 0;
    spflipY = 0;
    if ( flipX !== undefined ) { spflipX = flipX; }
    if ( flipY !== undefined ) { spflipY = flipY; }
    
    spx = n % 16;
    spy = Math.floor( n / 16 );
    
    spx *= 8;
    spy *= 8;
    
    // Highlight selected --
    // stroke(255, 0, 0);
    // noFill();
    // rect( sc( spx ), sc( spy ), sc( spw ), sc( sph ) );
    
    // Draw selected --
    // var hmm = get( sc( scx ), sc( scy ), sc( scw ), sc( sch ) );
    // set( x, y, hmm );
    
    // Draw selected --
    for ( var j = 0; j < sph; j += 1 ) {
        
        var rowIdx = spy + j;
        if ( spflipY ) { rowIdx = spy + sph - 1 - j; } // flip vertically
        
        var row = spriteSheet[ Math.floor( rowIdx ) ];
        
        for ( var i = 0; i < spw; i += 1 ) {
            
            var colIdx = spx + i;
            if ( spflipX ) { colIdx = spx + spw - 1 - i; } // flip horizontally
            
            var colorCode = row[ Math.floor( colIdx ) ];

            curColor = palette[ colorCode ];
            curColorT = paletteAlpha[ colorCode ];

            drawPixel( x + i, y + j );
        }
    }
};

var sspr = function ( sx, sy, sw, sh, dx, dy, dw, dh, flipX, flipY ) {
    
    // Description of PICO8 version found here,
    //  http://pico-8.wikia.com/wiki/Sspr

    /* Doesn't use same algo as PICO8.
       Instead performs simpler scaling by using floor.
       Thus scaled images only similar between the two
       algorithms if the scale amounts are whole numbers
    */
  
    var scx = 1;
    var scy = 1;
    if ( dw !== undefined ) { scx = Math.floor( dw / sw ); }
    if ( dh !== undefined ) { scy = Math.floor( dh / sh ); }
    
    var spflipX = 0;
    var spflipY = 0;
    if ( flipX !== undefined ) { spflipX = flipX; }
    if ( flipY !== undefined ) { spflipY = flipY; }
    
    var x, y;

    for ( var j = 0; j < sh; j += 1 ) {
        
        y = dy + j * scy;
        
        var rowIdx = sy + j;
        if ( spflipY ) { rowIdx = sy + sh - 1 - j; }
        
        var row = spriteSheet[ Math.floor( rowIdx ) ];
        
        for ( var i = 0; i < sw; i += 1 ) {
            
            x = dx + i * scx;
            
            var colIdx = sx + i;
            if ( spflipX ) { colIdx = sx + sw - 1 - i; }
            
            var colorCode = row[ Math.floor( colIdx ) ];
            
            if ( paletteAlpha[ colorCode ] === false ) {  // not transparent
            
                var colour = palette[ colorCode ];
            
                fill( colour );
                
                noStroke();
                // rect( sc( x ), sc( y ), sc( scx ), sc( scy ) );
                rect( sc( x - cameraX ), sc( y - cameraY ), sc( scx ), sc( scy ) );
            }
        }
    }
};

var clip = function ( x, y, w, h ) {};  // Todo

var pget = function ( x, y ) {

    loadPixels();

    var pix = imageData.data;
    
    var x_ = x - cameraX;
    var y_ = y - cameraY;

    var idx = sc( y_ ) * width + sc( x_ );
    idx *= 4;
    
    idx = Math.floor( idx );
    
    var r = pix[ idx + 0 ];
    var g = pix[ idx + 1 ];
    var b = pix[ idx + 2 ];
    
    // stroke(255, 0, 0);
    // noFill();
    // rect( sc( x ), sc( y ), pxSize, pxSize );
    
    return( color( r, g, b ) );
};

var pset = function ( x, y, c ) {
    
    if ( c !== undefined ) {
        
        pcolor( c );
    }

    drawPixel( x, y );
};

var sget = function ( x, y ) {
    
    var x_ = Math.floor( x );
    var y_ = Math.floor( y );
    
    var c = spriteSheet[ y_ ][ x_ ];
    return parseInt( c, 16 );  // convert to decimal
};

var sset = function ( x, y, c ) {
    
    var nc = c !== undefined ? c : palette3[ curColor ];

    var x_ = Math.floor( x );
    var y_ = Math.floor( y );
    
    spriteSheet[ y_ ][ x_ ] = nc.toString( 16 );  // convert to hex
};

var fget = function ( n, f ) {
    
    // Description from here,
    //  http://pico-8.wikia.com/wiki/Memory
    
    /* Each sprite has 8 flags, each of which can be turned
       on or off. One bytes stores the flags for a sprite.
       256 sprites, 256 bytes.
    */
    
    var r = Math.floor( n / 128 );
    var c = ( n % 128 ) * 2;
    
    var cur_val = spriteFlags[ r ][ c ] + spriteFlags[ r ][ c + 1 ]; // confirm nibble order
    
    cur_val = parseInt( cur_val, 16 );  // convert to decimal
    
    if ( f !== undefined ) {
        
        var bin = cur_val.toString( 2 ).padStart( 8, '0' );  // convert to binary
        
        // println( bin );
        
        return bin[ 7 - f ] === '1' ? true : false;  // MSB to LSB
    }
    else {
     
        return cur_val;
    }
};

var fset = function ( n, f, v ) {

    // Description from here,
    //  http://pico-8.wikia.com/wiki/Fset
    
    var r = Math.floor( n / 128 );
    var c = ( n % 128 ) * 2;
    
    var new_val = f;
        
    if ( v !== undefined ) {
    
        var cur_val = spriteFlags[ r ][ c ] + spriteFlags[ r ][ c + 1 ];
        
        cur_val = parseInt( cur_val, 16 );  // convert to decimal
        
        var bin = cur_val.toString( 2 ).padStart( 8, '0' );  // convert to binary
        
        bin = bin.split( '' );
        
        bin[ 7 - f ] = v ? '1' : '0';  // MSB to LSB
        
        bin = bin.join( '' );
        
        // println( bin );
        
        new_val = parseInt( bin, 2 );
    }

    new_val = new_val.toString( 16 ).padStart( 2, '0' );  // convert to hex
    
    spriteFlags[ r ][ c + 0 ] = new_val[ 0 ];
    spriteFlags[ r ][ c + 1 ] = new_val[ 1 ];  // confirm nibble order
};

var pmap = function ( celX, celY, dx, dy, celW, celH, layer ) {
    
    var f = 0;
    if ( layer !== undefined ) {

        f = layer;
    }
    
    for ( var j = celY; j < celY + celH; j += 1 ) {
        
        var row = mapSheet[ j ];
        
        var y = j * 8;
        
        var y2 = dy + ( y - celY * 8 );  // reposition
        
        for ( var i = celX; i < ( celX + celW ) * 2; i += 2 ) {
            
            var x = Math.floor( i / 2 );  // two nibbles per spirte
            x *= 8;
            
            var x2 = dx + ( x - celX * 8 );  // reposition
            
            var spIdx = row[ i ] + row[ i + 1 ];
            
            spIdx = parseInt( spIdx, 16 );  // convert to decimal

            if ( f > 0 ) {
                
                // Only draw sprite if appropriate flags set
                if( fget( spIdx ) === f ) {
                    
                    spr( spIdx, x2, y2 );
                }
            }
            else {
                
                // Draw all sprites
                spr( spIdx, x2, y2 );
            }
        }
    }
};

var mget = function ( celX, celY ) {

    var celX_ = Math.floor( celX ) * 2;
    var celY_ = Math.floor( celY );
    
    var row = mapSheet[ celY_ ];
    var spIdx = row[ celX_ ] + row[ celX_ + 1 ];

    return parseInt( spIdx, 16 );  // convert to decimal
};

var mset = function ( celX, celY, v ) {

    var celX_ = Math.floor( celX ) * 2;
    var celY_ = Math.floor( celY );

    var spIdx = v.toString( 16 ).padStart( 2, '0' );  // convert to hex

    mapSheet[ celY_ ][ celX_ + 0 ] = spIdx[ 0 ];
    mapSheet[ celY_ ][ celX_ + 1 ] = spIdx[ 1 ];
};

var pal = function ( c0, c1 ) {
    
    // Not implemented, p parameter

    if ( c0 !== undefined && c1 !== undefined ) {
        
        swapPaletteColors( c0, c1 );
    }
    else {
        
        resetPalettesToDefault();
        resetTransparency();
    }
};

var palt = function ( c, t ) {
    
    if ( c !== undefined && t !== undefined ) {

        paletteAlpha2[ c ] = t;
    }
    else {
        
        resetTransparency();
    }
};

var pcolor = function ( c ) {
    
    curColor = palette2[ c ];
    curColorT = paletteAlpha2[ c ];
};

var cls = function ( c_ ) {
    
    var c = 0;
    if ( c_ !== undefined ) { c = c_; }

    var screenW = sc( originalDimension );

    noStroke();
    fill( palette2[ c ] );
    rect( 0, 0, screenW, screenW );
    
    cursorX = 0;
    cursorY = 0;
};

var pcursor = function ( x, y ) {
    
    cursorX = x - cameraX;
    cursorY = y - cameraY;
};

var pprint = function ( str, x, y, c ) {
    
    // Not implemented, scrolling effect
    
    if ( x !== undefined && y !== undefined ) {
        
        pcursor( x, y );
    }
    
    if ( c !== undefined ) {
        
        pcolor( c );
    }
    
    // Use pjs's text() for simplicity
    fill( curColor );
    var s = String( str ).toUpperCase();
    text( s, sc( cursorX ), sc( cursorY ) );
    
    if ( x === undefined && y === undefined ) {
        
        // Advance cursor. According to
        //  http://pico-8.wikia.com/wiki/Print
        
        cursorY += 8;
    }
};

var pcamera = function ( x, y ) {
    
    // "Modifies the position of all functions that
    //  take position arguments (x, y)"
    // According to
    //  http://pico-8.wikia.com/wiki/DrawState
    
    if ( x !== undefined && y !== undefined ) {
        
        cameraX = x;
        cameraY = y;
    }
    else {
        
        cameraX = 0;
        cameraY = 0;
    }
};

var rectfill = function( x0, y0, x1, y1, c ) {
    
    if ( c !== undefined ) {
        
        pcolor( c );
    }
    
    var x0_ = x0 - cameraX;
    var y0_ = y0 - cameraY;
    var x1_ = x1 - cameraX;
    var y1_ = y1 - cameraY;

    noStroke();
    fill( curColor );

    rectMode( CORNERS );
    rect( sc( x0_ ), sc( y0_ ), sc( x1_ + 1 ), sc( y1_ + 1 ) );
    
    rectMode( CORNER ); // reset
};

var pline = function ( x0, y0, x1, y1, c ) {
    
    if ( c !== undefined ) {
        
        pcolor( c );
    }
    
    var prevT = curColorT;  // save
    curColorT = false;      // according to docs, transparency not observed
    
    drawLine( x0, y0, x1, y1 );
    
    curColorT = prevT;  // restore
};

var prect = function ( x0, y0, x1, y1, c ) {
    
    if ( c !== undefined ) {
        
        pcolor( c );
    }
    
    var w = x1 - x0 + 1;
    var h = y1 - y0 + 1;

    var prevT = curColorT;  // save
    curColorT = false;      // according to docs, transparency not observed
    
    strokeRect( x0, y0, w, h );
    
    curColorT = prevT;  // restore
};

var circ = function ( x, y, r, c ) {
    
    if ( c !== undefined ) {
        
        pcolor( c );
    }

    var prevT = curColorT;  // save
    curColorT = false;      // according to docs, transparency not observed
    
    strokeCircle( x, y, r );
    
    curColorT = prevT;  // restore
};

var circfill = function ( x, y, r, c ) {
    
    if ( c !== undefined ) {
        
        pcolor( c );
    }

    var prevT = curColorT;  // save
    curColorT = false;      // according to docs, transparency not observed
    
    fillCircle( x, y, r );
    
    curColorT = prevT;  // restore
};

var reload = function () {
    
    // Load with cart values
    spriteFlags = toAA( rom_flags );
    spriteSheet = toAA( rom_gfx.concat( rom_shared ) );
    mapSheet = toAA( reshapeMap( rom_map.concat( rom_shared ) ) );
    
    // Reset draw state
    pcamera();
    // clip();
    pal();
    pcolor( 0 );
};


// Tests -----------------------------------------

/*

var rm_gfx = [

	'00000000000000000000000006666660808000001191100011911000119110001191100000119000001190000011900000119000666666660000000000000000',
	'00000000dbdddddd0000000006666660080000000ccc00000ccc00000ccc00000ccc0000111c0000111c0000111c0000111c0000666666660000000000000000',
	'00000000b33dddbd666666660555555000000000f1f1f000f1f1f000f1f1f000f1f1f00001510000015100000151000001510000555555550000000000000000',
	'00000000ddb3db3b6666666605b56650000000000fff00000fff00000fff00000fff000005ff000005ff000005ff000005ff00005bb557d50000444044440000',
	'00000000dd2323d355555555055555500000000011d1100011d1100011d1100011d1100001100000011000000110000001100000567576650004444444444000',
	'00000000dd4b34ddd1dddd1d000000000000000011711000117110001171100011711000071000000770000007100000017000005765d6550044444444440400',
	'00000000dd3b33dd000000000000000000000000f111f000f111f000f111f000f111f00001f000000f1100000f11000001f00000555555550044444444944000',
	'00000000ddd44d3d0000000000000000000000000101000000010000010100000100000001100000001000001001000010100000000000000449444499994000',
	'0000000000000000000000000000000000000000119110001191100011911000119110000000000c8000000000000008c000000066666666042f99f9ff9f2000',
	'00000000000000000000000000000000000000001111100011111000111110001111100000000077777700000000007777770000666666660492222f22224000',
	'0088088000770880007707700077077000770770f111f000f111f000f111f000f111f000000007117111770000000711711177005555555500f4c7c2c7cf4000',
	'0082028000720280007202700072027000720270055500000555000005550000055500000111171171177110011117117117711058bc5bc500047ccf7cc44000',
	'00007000000070000000700000007000000070001111100011111000111110001111100011111177777711111111117777771111555555550000fff99ff40000',
	'008202800082028000820280008202700072027011111000111110001111100011111000111651111111651111156111111156115959b5850000fffffff00000',
	'0088088000880880008808800088077000770770f111f000f111f000f111f000f111f000000560000000560000065000000065005555555500001f999f100000',
	'0000000000000000000000000000000000000000010100000001000001010000010000000000000000000000000000000000000000000000000659ffff560000',
	'00000000000000000000000000000000000000008bbbb0008bbbb0008bbbb0008bbbb0000bbbb0000bbbb0000bbbb0000bbbb0000000000005600f999f006570',
	'0000000000000000000000000000000000000000b8888000b8888000b8888000b8888000bb880000bb880000bb880000bb88000000000000657600fff0067576',
	'0080008000800080008000800080008000800080f1f1f000f1f1f000f1f1f000f1f1f00088f1000088f1000088f1000088f100000ddd60007656700000675667',
	'00888880008888800088888000888880008888800fff00000fff00000fff00000fff0000bfff0000bfff0000bfff0000bfff00000dd650006775660056757776',
	'0082278000822e80008222800082228000822780f4fbf000f4fbf000f4fbf000f4fbf0000f4000000f4000000f4000000f4000000d6550006666576557567667',
	'00822280008222800082278000822e8000822280fb4bf000fb4bf000fb4bf000fb4bf0000bf000000fb000000fb000000bf00000066510007777657565577776',
	'00088800000888000008880000088800000888000bb400000bb400000bb400000bb400000bb0000000bb00000bb000000bb0000005d5d0006667765655776667',
	'00000000000000000000000000000000000000000b0b0000000b00000b0b00000b00000000b000000bb00000b00b0000b0b00000000000006776677656667766',
	'0000000000000000000000000000000000000000bbbb0000bbbb0000bbbb0000bbbb000000000000000000000000000000000000000000000000000000000000',
	'00000000000000000000000000000000000000008bbb80008bbb80008bbb80008bbb8000000000000000005d8888888000000000000000000606006006000000',
	'0008880000088800000888000008880000088800f888f000f888f000f888f000f888f00077d67777000000668efffe80000000000006ddd00606006006000000',
	'00878780008787800087878000878780008787800fff00000fff00000fff00000fff000077d6777700d66d6608efe8000000000000056dd00060506506500000',
	'0088888000888880008888800088888000888880fbb4f000fbb4f000fbb4f000fbb4f00077d6777700611666008f800000000000000556d00000000000000000',
	'0028882000288820002888200028882000288820f44bf000f44bf000f44bf000f44bf00077d6777700611655082f280000000000000156600000000000000000',
	'00020200000200000000020000020000000002000bbb00000bbb00000bbb00000bbb00005555555500d66555822f228000000000000d5d500000000000000000',
	'00000000000000000000000000000000000000000b0b0000000b00000b0b00000b0000000000000000d55d558888888000000000000000000000000000000000',
	'000000000000000000000000000000000000000033b3b3bb00076000000760000007600000080000008888800008000080000000000800000000008000080000',
	'0000000000000000000000000000000000000000b3bb3bb3000760000007e000000e600000888000001118800001800018000000000800000000081000810000',
	'000777777777777777776000000000000000000066666666777777770007d000000d600008181800000081800000180001800080000800008000810008100000',
	'000766666666666666676000600000000000000655555555666766660007e000000e600081080180000810808888888000180080800800808008100088888880',
	'00076ffffffffffffff760001d66d6d55d66d6d155555555fff76fff0007d000000d600010080010008100801111181000018080180808108081000018111110',
	'00076ffffffffffffff76000155555566555555155555555fff76fff0007e000000e600000080000081000100000810000001880018881008810000001800000',
	'00076ffffffffffffff76000336666666666663355555555fff76fff0007d000000d600000080000810000000008100000888880001810008888800000180000',
	'0007600000000000000760003b666666666666b359995999000760000007e000000e600000010000100000000001000000111110000100001111100000010000',
	'000760000000000000076000000d00000000d0005555555500000000200000000000000000999000000000000000000000000000000000000000000088888000',
	'00076000000000000007600000600000000006005555555500000000250000000000000009111900000000000000000000000000000000000800000088111000',
	'00076000777777777777600000600000000006005555555552222225500000050000077001000900000000000000000000000000088000000008000081800000',
	'0007600066676666666760000d000000000000d055555555e226622ee000000e00000cc000009100000000000800000000800000000800000000000080180000',
	'00076000fff76ffffff76000100000000000000166666666e222222ee000000e66676cc6000910007e0000007e8000007e0000007e0800007e00800080018000',
	'00076000fff76ffffff76000155555511555555100000000e22222dee000000e6766666600010000770000007700000077000000770000007700000010001800',
	'00076000fff76ffffff76000336666666666663300000000e222222ee000000e5555555500090000770000007700000077000000770000007700000000000180',
	'0007600000076000000760003b666666666666b3000000000000000000000000d1dddd1d00010000550000005500000055000000550000005500000000000010',
	'0007600000076000000760000007600000076000333b3b33000000000000000900000000000000000000000000000000000000000000000000000000b157651b',
	'00076000000760000007600000076000000767b0b33333b3000000000000009000000000000000000000000000000000000000000000000000000000b157651b',
	'00077777777777777777600000077777000767703b3b3333520000050000091000004440767777755577777676755000000055767650000000000056b157651b',
	'0006666666666666666660000007666600076770b3333b33e2000000000009000004494465cccccc6cccccc565cc600000006cc56560000000000065b157651b',
	'000ffffffffffffffffff00000076fff00076550333b333be00000000900910000049494f5cccc6c6cccc6c5f5cc600000006cc5f560000000000065b157651b',
	'000ffffffffffffffffff00000076fff00076000b3333b33e00000060190900000049494f5ccc6cc6ccc6cc5f5cc600000006cc5f560000000000065b157651b',
	'000ffffffffffffffffff00000076fff000760003b33b333e50060050019100000044944f5cccccc6cccccc5f5cc600000006cc5f560000000000065b157651b',
	'000000000000000000000000000760000007600033b3333b000500200001000000004440000000000000000000000000000000000000000000000000b157651b',
	'00000000000000000000000000000000000000000007700000076440000760000000000000076000000760000007600000057000000000000000000000060000',
	'000000000000000000000000000000000000000000077000000764400447600000000000000670000006700000015000000c7000000000000000000000000060',
	'777777777777777777777777777777777777777700055000000764400447600077777777000c7000000c700000015000000c7000000000000000000060006000',
	'edededed6666666666666666666666666666666600055000000764400447600066666666000c7000000c700000000000000c7000000570000000000000060000',
	'ededededffc9ccff5c1c1c5fffccacffff7777ff000550000007622004476000ffffffff000c70000001500000000000000c7000000c70000000000000000006',
	'ededededff3b34ff5c1c1c5fffbb33ffff6cc6ff000550000007624004476000ff9999ff000c70000001500000000000000c7000000c70000005700006000600',
	'ededededfffffffff77777ffffffffffff5555ff000550000007622002276000ff5555ff000c7000000000000000000000067000000670000006700000000000',
	'000000000000000000000000000000000055550000055000000762d0022760000055550000057000000000000000000000076000000760000007600000600006',
];
var rm_shared = [

	'0000000000000000015d651000000001515555111000000000000000000000000888888888800000888888000088888800888888088888888800008888888800',
	'00000000000000001dddd50000000000111000001100000000000000000000000888888888880000888888000088888800888888088888888880088888888880',
	'000000000000000156dd510000000000000000000011000000000000000000000888888888888008888888800088888800888888088888888888088888888880',
	'000000000000001d66d1000015001000000000000005510000000000000000000288882288888008888888800088888800888888088882288888088882288880',
	'00000000000001dddd55100150000000000000000005555000000000000000000088880028888008888888800028888888888882088880028888088880088880',
	'0000000000000566d511000510000000000000000000111000000000000000000088880088882008882288800008888888888880088880088888088880088880',
	'0000000000001d6d5100000100000000000000000000000100000000000000000088888888880088880088880008828888828880088888888882088880088880',
	'000000000000dd550000000100000000000000000000000110000000000000000088888888820088880088880008808888808880088888888880088880088880',
	'00000000001d60000000000000000000000000000000000011000000000000000088888888800088888888880008808888808880088888888888088880088880',
	'0000000000d6d5100000000000000000000000000000000005100000000000000088882288880088888888880008802888208880088882288888088880088880',
	'0000000005665d550000000000000000000000000000000011001000000000000088880088880088888888880008800888008880088880028888088880088880',
	'000000051d6ddd110000000000000000000000000000000001100000000000000888888088888888882288888088880888088888088880088888088880088880',
	'00000001d6d511100000000000000000000000000010000000010000000000000888888088888888880088888088880888088888088888888888088888888880',
	'0000000051d100000001100000000000000000000001000000155000000000000888888088888888880088888088880282088888088888888882088888888880',
	'00000001d55000000005100000000000000000000000000000051100000000000888888088888888880088888088880080088888088888888820028888888820',
	'00000005ddd500000015000000000000000010000000000000010100000000000222222022222222220022222022220020022222022222222200002222222200',
	'00000005d6650000005d0000000000000000220000000000000001000000000000008000000000000000000000055b330007533b000663b30000000000000000',
	'000000155dd5000000150000100000000000222000000000000001000000000000097f0006660606060060600007533b00055333000663330000000000000000',
	'0000001d5511000000551100022000000002222220000000001111000000000000a777e0060606560600060000055333557573b3555113330000000000000000',
	'000000ddd5000000002505101222000000022222200000000001551000000000000b7d00066606060660060000057b337555533357511b330000000000000000',
	'00001d66d50000010005150022220110002422222000000000015d50000000000000c00000000000000000000005533b0007533b0005733b0000000000000000',
	'001d6d5650000000000111002422110000242222200000000000155100000000000000000000000000000000000753335755533355715b330000000000000000',
	'005555dd00000000002501012422500000242222200000000000000110000000000000000000000000000000000553b355575b33755753330000000000000000',
	'00011dd51000001020200001222510000022222220000000000000000000000000000000000000000000000000057333b33b333bb3b333b30000000000000000',
	'00005dd5000000012220100022251000022222222000000000000550000000000000000000000000000000000006600000000000000663330000000000000000',
	'00055d510000000055421000022100000222222200000000000000110000000000000000000000000000000000066000000000000006633b0000000000000000',
	'00010d5000000010254210002220000002222222220000000000000000000000000000000000000000000000000115755575557575511b330000000000000000',
	'000055501000011026d5000011200015444444222000000000000001000000000000000000000000000000000001155575557555557113330000000000000000',
	'00005d510000010225555f555ff4502444444444222000000000000550000000000000000000000000000000000110000000000000011b330000000000000000',
	'00005655100000015ff444fddff452444444400002200000000000005100000000000000000000000000000000011755575557555751133b0000000000000000',
	'0000566500000005f452100554444544445000052222000000000000500000000000000000000000000000000001155755575557555113330000000000000000',
	'000055d500000005f444550000544f4220000005444200000000000051000000000000000000000000000000000b33b333b33b33b3b333b30000000000000000',
	'0000151000000004f44445101154ff44021510002442200000000000115000000000000000000000000000000000000000000000000000000000000000000000',
	'0000055500000004ff445610d544f444225651550244220000000000111100008888888088888880888888808888888088888880888888800000000000000000',
	'0000565100000004ffffffffd44fff442444dd422242220000000000111000008efffe808efffe808e222e808211128082111280821112800000000000000000',
	'00016d5100000104ffffff4444ffff442444444444422200000000001550000008efe80008efe80008fff80008e2e80008222800082128000000000000000000',
	'00166d5500001404fffffffff4ffff4444444444444222000000000015500000008f8000008f8000008f8000008f8000008e8000008280000000000000000000',
	'01dd6d5500005444ffffffffffffff4444444444444222000000000105510000082f2800082f2800082f280008efe80008efe80008efe8000000000000000000',
	'055d665510005445ffffffffffffff4444444444444222005000000500100000821f128082fff2808efffe808efffe808efffe808efffe800000000000000000',
	'115dddd1500004f4ff99449fffffff442444444444222224d0000005100000008888888088888880888888808888888088888880888888800000000000000000',
	'0051ddd555000055ff9444ffffffff44444444444422205f50000005510000000000000000000000000000000000000000000000000000000000000000000000',
	'0000565511100000444944ffffffff4442444444442220d500000005000000000000000000000000000000000000000000000000000000000000000000000000',
	'0000155011110000544444ffffffff44444444444222100000000015000000000000000000000000000000000000000000000000000000000000000000000000',
	'0000051001100100544444fffffffff4444444444222110000000001000000000000000000000000000000000000000000000000000000000000000000000000',
	'0000011011500000044449fffff44442224444444422510000000001000000000000000000000000000000000000000000000000000000000000000000000000',
	'000001105155000004449fffffdd4445002444224221500000000001100000000000000000000000000000000000000000000000000000000000000000000000',
	'00000015500510000544ffffff4f4454011224222220500000000155510000000000000000000000000000000000000000000000000000000000000000000000',
	'00000015d51100000544fffffffff45f4550222422015005000015d5500000000000000000000000000000000000000000000000000000000000000000000000',
	'0000000d5d5500000044fffff4fd444444444222220d500d10000155000000000000000000000000000000000000000000000000000000000000000000000000',
	'0000000d5d5d555000554ff44455224442224422211d000d60000565100000000000000000000000000000000000000000000000000000000000000000000000',
	'000000151255d4d000054ff45d4ff4f4444444222055100d6d000551000000000000000000000000000000000000000000000000000000000000000000000000',
	'000000d1225155d1000554f4fffd4444424444201051220d56601000000000000000000000000000000000000000000000000000000000000000000000000000',
	'000000d222515d650005d444fff44222224442201102222d55661100000000000000000000000000000000000000000000000000000000000000000000000000',
	'000005d222505d6550006d444ff44445544442000002222dd05d6555100000000000000000000000000000000000000000000000000000000000000000000000',
	'00000d22255025d551005f4444f4df4fe442211000222225d0015d566d5000000000000000000000000000000000000000000000000000000000000000000000',
	'00000d22251022555550066444dfffff4442011000222222500121056676d1000000000000000000000000000000000000000000000000000000000000000000',
	'00000d222d002221055105fd44ff6d444422110002222222500121100156776d0000000000000000000000000000000000000000000000000000000000000000',
	'000055220d0022210155016ff4dd555442221101122222225011200000551dd60000000000000000000000000000000000000000000000000000000000000000',
	'0001d2221d002220001000dfff442105522222222222222210125000011000010000000000000000000000000000000000000000000000000000000000000000',
	'0005522255022220001005ffffff4444444222242224222211221000100000000000000000000000000000000000000000000000000000000000000000000000',
	'0005512255022220000057ffffffffff444244444444442212221001000000000000000000000000000000000000000000000000000000000000000000000000',
	'000d2011d12222200016fff4ffffffffe42244444444422212220000000000000000000000000000000000000000000000000000000000000000000000000000',
	'00152105d5242240057dff444ffff44ff42244444444442212250000000000000000000000000000000000000000000000000000000000000000000000000000',
	'0052215552242241d65df44f4fffff44442244444444442225110000000000000000000000000000000000000000000000000000000000000000000000000000',    
];
var rm_map = [

	'40724141417241414172414178514173415141724171414151417274787273420000000000000000000000000000000000000000000000000000000000000000',
	'00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',
	'501d0d0000000000030303000079000001503d022d00580350010000000058500000000000000000000000000000000000000000000000000000000000000000',
	'00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',
	'500000000000000000000000007c00000150000000002d015000000000002d500000000000000000000000000000000000000000000000000000000000000000',
	'00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',
	'50000000004041414141414141620000016056414141414161415641514141520000000000000000000000000000000000000000000000000000000000000000',
	'00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',
	'6371696a735200000000000000000000000000000000000000000000500158500000000000000000000000000000000000000000000000000000000000000000',
	'00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',
	'7600000000640000000000000000000000000000000000000000000050003d500000000000000000000000000000000000000000000000000000000000000000',
	'00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',
	'506800000063696a51787141414173714178415174696a7142000000500000500000000000000000000000000000000000000000000000000000000000000000',
	'00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',
	'7600000058770000760000000000000200001d760000000250000000605641520000000000000000000000000000000000000000000000000000000000000000',
	'00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',
	'500000002d5000005000000000000000000068770000006877000000000000500000000000000000000000000000000000000000000000000000000000000000',
	'00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',
	'63414141786200006041415642000000000000790000000050000000000000500000000000000000000000000000000000000000000000000000000000000000',
	'00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',
	'50001d1d0000000000000000766800000000007c0000000050000000000000500000000000000000000000000000000000000000000000000000000000000000',
	'00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',
	'50000000000000000000000060425800000000775800580050000000000000500000000000000000000000000000000000000000000000000000000000000000',
	'00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',
	'50000000000000000000000000503d00000001763d002d0176580000000001500000000000000000000000000000000000000000000000000000000000000000',
	'00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',
	'5000004041564170747042000063414141417446414141416141696a696a41520000000000000000000000000000000000000000000000000000000000000000',
	'00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',
	'5000005003000000003a48000064000000003a500200000000010000000001500000000000000000000000000000000000000000000000000000000000000000',
	'00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',
	'50000047000000004141520000470000004171520000000000000000000000500000000000000000000000000000000000000000000000000000000000000000',
	'00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',
	'50000050000000000039500000500000000039500000000000000000000000500000000000000000000000000000000000000000000000000000000000000000',
	'00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',
	'5000004700000000000248000047003d000200500000000000000000000000500000000000000000000000000000000000000000000000000000000000000000',
	'00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',
	'50000060417041704170620000605641704170464141414141415156565172620000000000000000000000000000000000000000000000000000000000000000',
	'00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',
	'7600000000000000000000000000000000000150656565656565507f7fab65650000000000000000000000000000000000000000000000000000000000000000',
	'00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',
	'6341414141414141420000000000000000000077656565656565507f7fab65650000000000000000000000000000000000000000000000000000000000000000',
	'00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',
	'ab65656565656565640000000000004041724152656565656565507f7fab65650000000000000000000000000000000000000000000000000000000000000000',
	'00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',
	'ab6565656565656550013d022d0001507f7f7f50656565656565507f7fab65650000000000000000000000000000000000000000000000000000000000000000',
	'00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',
	'ab6565656565656560417241417241627f7f7f50656565656565507f7fab65650000000000000000000000000000000000000000000000000000000000000000',
	'00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',
	'ab65656565656565656565657f7f7f7f7f7f7f50656565656565507f7fab65650000000000000000000000000000000000000000000000000000000000000000',
	'00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',
	'ab65656565656565657f7f7f7f7f7f7f7f7f7f604141696a4141627f7fbbbcad0000000000000000000000000000000000000000000000000000000000000000',
	'00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',
	'ab657f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7fab0000000000000000000000000000000000000000000000000000000000000000',
	'00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',
	'ab7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7fab0000000000000000000000000000000000000000000000000000000000000000',
	'00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',
	'ab7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7fab0000000000000000000000000000000000000000000000000000000000000000',
	'00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',
	'bbbc696abcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbd0000000000000000000000000000000000000000000000000000000000000000',
	'00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',
	'45454545454545454545454545454545454545454545454545454545454545450000000000000000000000000000000000000000000000000000000000000000',
	'00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',
	'55555555555555555555555555555555555555555555555555555555555555550000000000000000000000000000000000000000000000000000000000000000',
	'00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',
];
var rm_flags = [

    '0001010100000000000000000001000000000000000000000000000000010000000000000000000000000000000100000000000000000000000101000001000001010101010001010100000000000000010101000000010001000000000000000101010101000000000301020002000001010101010101010105040401000000',
	'0000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010100000000000000000000000000010101000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',    
];

spriteFlags = toAA( rm_flags );
// spriteSheet = toAA( rm_gfx );
spriteSheet = toAA( rm_gfx.concat( rm_shared ) );
// mapSheet = toAA( reshapeMap( rm_map ) );
mapSheet = toAA( reshapeMap( rm_map.concat( rm_shared ) ) );

var usc = function( x ){ return x / pxSize; };


// drawSpriteSheet( spriteSheet );

// spr(22, usc( 100 ), usc( 350 ) );
// spr(14, usc( 200 ), usc( 450 ), 2, 3, 0, 0 );
// spr(39, usc( 200 ), usc( 450 ), 1, 1, 1, 1 );

// stroke(255, 0, 0);
// line(100,0,100,height);
// line(0,200,width,200);
// line(0,250,width,250);
// line(0,400,width,400);
// sspr( 8, 0, 8*2, 8, usc( 100 ), usc( 200 ) );
// sspr( 8, 0, 8*2, 8, usc( 100 ), usc( 250 ), 8*6, 8*3 );
// sspr( 8, 0, 8*2, 8, usc( 100 ), usc( 400 ), 8*6, 8*3, 0, 1 );

// var c = pget( 8*1 + 2, 8*0 + 6 );
// fill( c ); 
// rect( 100, 250, 20, 20 );

// pset( 128 / 2, 128 / 2 + 10, 14 );

// var c = sget( 8*1 + 2, 8*0 + 3 );
// fill( c ); 
// rect( 100, 250, 20, 20 );

// sset( 8*1 + 2, 8*0 + 0, 12 );
// drawRegion( spriteSheet );

// println( spriteFlags[0] );
// println( fget( 121 ) );
// println( fget( 121, 2 ) );

// println( spriteFlags[1] );
// fset( 128, 254 );
// println( spriteFlags[1] );
// fset( 129, 7, true );
// println( spriteFlags[1] );
// fset( 128, 7, false );
// println( spriteFlags[1] );

// background(255);
// var c = 'd';
// background( palette[ c ] );
// drawMap( mapSheet, 0, 0 );
// drawMap( mapSheet, -60, 0 );
// drawMap( mapSheet, 0, -56 );
// drawMap( mapSheet, -60, -60 );

// pmap( 16, 13, 0, 0, 64, 32 );
// pmap( 0, 0, 0, 0, 16, 16, 0 );
// pmap( 0, 0, 0, 0, 16, 16, 1 * Math.pow( 2, 0 ) );

// println( mget( 0, 1 ) );
// mset( 0, 1, 49 );
// println( mget( 0, 1 ) );
// pmap( 0, 0, 0, 0, 16, 16, 0 );

// pal( 11, 0 );
// spr( 40, 20, 20 );
// pal();
// spr( 40, 28, 20 );

// stroke(255, 0, 0);
// line( sc(128), 0, sc(128), sc(128) );
// line( 0, sc(128), sc(128), sc(128) );
// line( sc(64), 0, sc(64), sc(128) );
// line( 0, sc(64), sc(128), sc(64) );
// pprint( 'hello', 0, 0 );
// pprint( 'strife', 64, 64, 2 );
// rectfill( 0, 0, 4, 8, 7 );  // 4x8
// pprint( 'hello', 0, 0, 3 );

// rectfill( 20, 28, 20 + 8, 28 + 8, 12 );
// prect( 21, 20, 21 + 8, 20 + 8, 10 );
// circ( 100, 100, 50 );
// circfill( 64, 64, 4, 3 );

cls( 13 );

// var nr = 20;
// textSize(10);
// for ( var i = 0; i < 128; i += 1 ) {
    
//     var dx = Math.floor( i / nr ) * 20;
//     var dy = ( i * 9 ) % ( 9 * nr );
//     spr( i, dx, dy );
    
//     fill(255);
//     var o = fget(i,0);
//     if( o ) {
//         text( 'yup', sc(dx+8), sc(dy+3) );
//     }
// }

var p1 = {};
p1.x = 122;
p1.y = 120;

var r1 = 0;
var r2 = 0;
pcamera(min(125,max(3,p1.x-64+r1)),min(125,max(2,p1.y-64+r2)));

noFill();
stroke(255, 179, 0);
rect( sc( p1.x - cameraX ), sc( p1.y - cameraY ), sc(8), sc(8) );

var s = mget( p1.x / 8, p1.y / 8 );  // should be zero
// println( s );
spr( s, p1.x, p1.y );
var s2 = mget( ( p1.x + 8 * 2 ) / 8, p1.y / 8 );  // should be wall
spr( s2, p1.x + 8 * 2, p1.y );
var s3 = mget( p1.x / 8, ( p1.y + 8 * 2 ) / 8 );  // should be chair
spr( s3, p1.x, p1.y + 8 * 2 );

// background(255);

*/

